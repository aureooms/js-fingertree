"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Two = Two;

var _ = require(".");

var _node = require("../2-node");

var _core = require("../0-core");

function Two(a, b) {
  this.a = a;
  this.b = b;
  this.v = null;
}

Two.prototype = new _.Digit();

Two.prototype.measure = function (M) {
  if (this.v === null) this.v = M.plus(M.measure(this.a), M.measure(this.b));
  return this.v;
};

Two.prototype.head = function () {
  return this.a;
};

Two.prototype.last = function () {
  return this.b;
};

Two.prototype.init = function () {
  return new _.One(this.a);
};

Two.prototype.tail = function () {
  return new _.One(this.b);
};

Two.prototype.push = function (value) {
  return new _.Three(this.a, this.b, value);
};

Two.prototype.cons = function (value) {
  return new _.Three(value, this.a, this.b);
};

Two.prototype.node = function (M) {
  throw new Error("Two should never be converted to Node2 with current implementation");
};
/**
 * It is assumed that p(|this|) is true.
 */


Two.prototype.splitDigit = function (p, i, M) {
  i = M.plus(i, M.measure(this.a));
  if (p(i)) return new _core.Split([], this.a, [this.b]);
  return new _core.Split([this.a], this.b, []);
};

Two.prototype._nodes = function (M, other) {
  if (other instanceof _.One) return [(0, _node.node3)(M, this.a, this.b, other.a)];
  if (other instanceof Two) return [(0, _node.node2)(M, this.a, this.b), (0, _node.node2)(M, other.a, other.b)];
  if (other instanceof _.Three) return [(0, _node.node3)(M, this.a, this.b, other.a), (0, _node.node2)(M, other.b, other.c)];
  return [(0, _node.node3)(M, this.a, this.b, other.a), (0, _node.node3)(M, other.b, other.c, other.d)];
};

Two.prototype._list = function () {
  return [this.a, this.b];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8xLWRpZ2l0LzItVHdvLmpzIl0sIm5hbWVzIjpbIlR3byIsImEiLCJiIiwidiIsInByb3RvdHlwZSIsIkRpZ2l0IiwibWVhc3VyZSIsIk0iLCJwbHVzIiwiaGVhZCIsImxhc3QiLCJpbml0IiwiT25lIiwidGFpbCIsInB1c2giLCJ2YWx1ZSIsIlRocmVlIiwiY29ucyIsIm5vZGUiLCJFcnJvciIsInNwbGl0RGlnaXQiLCJwIiwiaSIsIlNwbGl0IiwiX25vZGVzIiwib3RoZXIiLCJjIiwiZCIsIl9saXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRU8sU0FBU0EsR0FBVCxDQUFlQyxDQUFmLEVBQW1CQyxDQUFuQixFQUF1QjtBQUM3QixPQUFLRCxDQUFMLEdBQVNBLENBQVQ7QUFDQSxPQUFLQyxDQUFMLEdBQVNBLENBQVQ7QUFDQSxPQUFLQyxDQUFMLEdBQVMsSUFBVDtBQUNBOztBQUVESCxHQUFHLENBQUNJLFNBQUosR0FBZ0IsSUFBSUMsT0FBSixFQUFoQjs7QUFFQUwsR0FBRyxDQUFDSSxTQUFKLENBQWNFLE9BQWQsR0FBd0IsVUFBV0MsQ0FBWCxFQUFlO0FBQ3RDLE1BQUssS0FBS0osQ0FBTCxLQUFXLElBQWhCLEVBQXVCLEtBQUtBLENBQUwsR0FBU0ksQ0FBQyxDQUFDQyxJQUFGLENBQVFELENBQUMsQ0FBQ0QsT0FBRixDQUFXLEtBQUtMLENBQWhCLENBQVIsRUFBOEJNLENBQUMsQ0FBQ0QsT0FBRixDQUFXLEtBQUtKLENBQWhCLENBQTlCLENBQVQ7QUFDdkIsU0FBTyxLQUFLQyxDQUFaO0FBQ0EsQ0FIRDs7QUFLQUgsR0FBRyxDQUFDSSxTQUFKLENBQWNLLElBQWQsR0FBcUIsWUFBYTtBQUNqQyxTQUFPLEtBQUtSLENBQVo7QUFDQSxDQUZEOztBQUlBRCxHQUFHLENBQUNJLFNBQUosQ0FBY00sSUFBZCxHQUFxQixZQUFhO0FBQ2pDLFNBQU8sS0FBS1IsQ0FBWjtBQUNBLENBRkQ7O0FBSUFGLEdBQUcs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YTtBQUNsQyxTQUFPLENBQUUsS0FBSzNCLENBQVAsRUFBVyxLQUFLQyxDQUFoQixDQUFQO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZ2l0ICwgT25lICwgVGhyZWUgfSBmcm9tICcuJyA7XG5pbXBvcnQgeyBub2RlMiAsIG5vZGUzIH0gZnJvbSAnLi4vMi1ub2RlJyA7XG5pbXBvcnQgeyBTcGxpdCB9IGZyb20gJy4uLzAtY29yZScgO1xuXG5leHBvcnQgZnVuY3Rpb24gVHdvICggYSAsIGIgKSB7XG5cdHRoaXMuYSA9IGEgO1xuXHR0aGlzLmIgPSBiIDtcblx0dGhpcy52ID0gbnVsbCA7XG59XG5cblR3by5wcm90b3R5cGUgPSBuZXcgRGlnaXQoICkgO1xuXG5Ud28ucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbiAoIE0gKSB7XG5cdGlmICggdGhpcy52ID09PSBudWxsICkgdGhpcy52ID0gTS5wbHVzKCBNLm1lYXN1cmUoIHRoaXMuYSApICwgTS5tZWFzdXJlKCB0aGlzLmIgKSApIDtcblx0cmV0dXJuIHRoaXMudiA7XG59IDtcblxuVHdvLnByb3RvdHlwZS5oZWFkID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMuYSA7XG59IDtcblxuVHdvLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMuYiA7XG59IDtcblxuVHdvLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIG5ldyBPbmUoIHRoaXMuYSApIDtcbn0gO1xuXG5Ud28ucHJvdG90eXBlLnRhaWwgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IE9uZSggdGhpcy5iICkgO1xufSA7XG5cblR3by5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgVGhyZWUoIHRoaXMuYSAsIHRoaXMuYiAsIHZhbHVlICkgO1xufSA7XG5cblR3by5wcm90b3R5cGUuY29ucyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgVGhyZWUoIHZhbHVlICwgdGhpcy5hICwgdGhpcy5iICkgO1xufSA7XG5cblR3by5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uICggTSApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlR3byBzaG91bGQgbmV2ZXIgYmUgY29udmVydGVkIHRvIE5vZGUyIHdpdGggY3VycmVudCBpbXBsZW1lbnRhdGlvblwiICkgO1xufSA7XG5cbi8qKlxuICogSXQgaXMgYXNzdW1lZCB0aGF0IHAofHRoaXN8KSBpcyB0cnVlLlxuICovXG5Ud28ucHJvdG90eXBlLnNwbGl0RGlnaXQgPSBmdW5jdGlvbiAoIHAgLCBpICwgTSApIHtcblx0aSA9IE0ucGx1cyggaSAsIE0ubWVhc3VyZSggdGhpcy5hICkgKSA7XG5cdGlmICggcCggaSApICkgcmV0dXJuIG5ldyBTcGxpdCggWyBdICwgdGhpcy5hICwgWyB0aGlzLmIgXSApIDtcblx0cmV0dXJuIG5ldyBTcGxpdCggWyB0aGlzLmEgXSAsIHRoaXMuYiAsIFsgXSApIDtcbn0gO1xuXG5Ud28ucHJvdG90eXBlLl9ub2RlcyA9IGZ1bmN0aW9uICggTSAsIG90aGVyICkge1xuXHRpZiAoIG90aGVyIGluc3RhbmNlb2YgT25lIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIG90aGVyLmEgKSBdIDtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIFR3byApXG5cdFx0cmV0dXJuIFsgbm9kZTIoIE0gLCB0aGlzLmEgLCB0aGlzLmIgKSAsIG5vZGUyKCBNICwgb3RoZXIuYSAsIG90aGVyLmIgKSBdIDtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIFRocmVlIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIG90aGVyLmEgKSAsIG5vZGUyKCBNICwgb3RoZXIuYiAsIG90aGVyLmMgKSBdIDtcblx0cmV0dXJuIFsgbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCBvdGhlci5hICkgLCBub2RlMyggTSAsIG90aGVyLmIgLCBvdGhlci5jICwgb3RoZXIuZCApIF0gO1xufSA7XG5cblR3by5wcm90b3R5cGUuX2xpc3QgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gWyB0aGlzLmEgLCB0aGlzLmIgXSA7XG59IDtcbiJdfQ==