'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Two = Two;

var _ = require('.');

var _node = require('../2-node');

var _core = require('../0-core');

function Two(a, b) {
	this.a = a;
	this.b = b;
	this.v = null;
}

Two.prototype = new _.Digit();

Two.prototype.measure = function (M) {
	if (this.v === null) this.v = M.plus(M.measure(this.a), M.measure(this.b));
	return this.v;
};

Two.prototype.head = function () {
	return this.a;
};

Two.prototype.last = function () {
	return this.b;
};

Two.prototype.init = function () {
	return new _.One(this.a);
};

Two.prototype.tail = function () {
	return new _.One(this.b);
};

Two.prototype.push = function (value) {
	return new _.Three(this.a, this.b, value);
};

Two.prototype.cons = function (value) {
	return new _.Three(value, this.a, this.b);
};

Two.prototype.node = function (M) {
	throw new Error("Two should never be converted to Node2 with current implementation");
};

/**
 * It is assumed that p(|this|) is true.
 */
Two.prototype.splitDigit = function (p, i, M) {
	i = M.plus(i, M.measure(this.a));
	if (p(i)) return new _core.Split([], this.a, [this.b]);
	return new _core.Split([this.a], this.b, []);
};

Two.prototype._nodes = function (M, other) {
	if (other instanceof _.One) return [(0, _node.node3)(M, this.a, this.b, other.a)];
	if (other instanceof Two) return [(0, _node.node2)(M, this.a, this.b), (0, _node.node2)(M, other.a, other.b)];
	if (other instanceof _.Three) return [(0, _node.node3)(M, this.a, this.b, other.a), (0, _node.node2)(M, other.b, other.c)];
	return [(0, _node.node3)(M, this.a, this.b, other.a), (0, _node.node3)(M, other.b, other.c, other.d)];
};

Two.prototype._list = function () {
	return [this.a, this.b];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8xLWRpZ2l0LzItVHdvLmpzIl0sIm5hbWVzIjpbIlR3byIsImEiLCJiIiwidiIsInByb3RvdHlwZSIsIm1lYXN1cmUiLCJNIiwicGx1cyIsImhlYWQiLCJsYXN0IiwiaW5pdCIsInRhaWwiLCJwdXNoIiwidmFsdWUiLCJjb25zIiwibm9kZSIsIkVycm9yIiwic3BsaXREaWdpdCIsInAiLCJpIiwiX25vZGVzIiwib3RoZXIiLCJjIiwiZCIsIl9saXN0Il0sIm1hcHBpbmdzIjoiOzs7OztRQUlnQkEsRyxHQUFBQSxHOztBQUpoQjs7QUFDQTs7QUFDQTs7QUFFTyxTQUFTQSxHQUFULENBQWVDLENBQWYsRUFBbUJDLENBQW5CLEVBQXVCO0FBQzdCLE1BQUtELENBQUwsR0FBU0EsQ0FBVDtBQUNBLE1BQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE1BQUtDLENBQUwsR0FBUyxJQUFUO0FBQ0E7O0FBRURILElBQUlJLFNBQUosR0FBZ0IsYUFBaEI7O0FBRUFKLElBQUlJLFNBQUosQ0FBY0MsT0FBZCxHQUF3QixVQUFXQyxDQUFYLEVBQWU7QUFDdEMsS0FBSyxLQUFLSCxDQUFMLEtBQVcsSUFBaEIsRUFBdUIsS0FBS0EsQ0FBTCxHQUFTRyxFQUFFQyxJQUFGLENBQVFELEVBQUVELE9BQUYsQ0FBVyxLQUFLSixDQUFoQixDQUFSLEVBQThCSyxFQUFFRCxPQUFGLENBQVcsS0FBS0gsQ0FBaEIsQ0FBOUIsQ0FBVDtBQUN2QixRQUFPLEtBQUtDLENBQVo7QUFDQSxDQUhEOztBQUtBSCxJQUFJSSxTQUFKLENBQWNJLElBQWQsR0FBcUIsWUFBYTtBQUNqQyxRQUFPLEtBQUtQLENBQVo7QUFDQSxDQUZEOztBQUlBRCxJQUFJSSxTQUFKLENBQWNLLElBQWQsR0FBcUIsWUFBYTtBQUNqQyxRQUFPLEtBQUtQLENBQVo7QUFDQSxDQUZEOztBQUlBRixJQUFJSSxTQUFKLENBQWNNLElBQWQsR0FBcUIsWUFBYTtBQUNqQyxRQUFPLFVBQVMsS0FBS1QsQ0FBZCxDQUFQO0FBQ0EsQ0FGRDs7QUFJQUQsSUFBSUksU0FBSixDQUFjTyxJQUFkLEdBQXFCLFlBQWE7QUFDakMsUUFBTyxVQUFTLEtBQUtULENBQWQsQ0FBUDtBQUNBLENBRkQ7O0FBSUFGLElBQUlJLFNBQUosQ0FBY1EsSUFBZCxHQUFxQixVQUFXQyxLQUFYLEVBQW1CO0FBQ3ZDLFFBQU8sWUFBVyxLQUFLWixDQUFoQixFQUFvQixLQUFLQyxDQUF6QixFQUE2QlcsS0FBN0IsQ0FBUDtBQUNBLENBRkQ7O0FBSUFiLElBQUlJLFNBQUosQ0FBY1UsSUFBZCxHQUFxQixVQUFXRCxLQUFYLEVBQW1CO0FBQ3ZDLFFBQU8sWUFBV0EsS0FBWCxFQUFtQixLQUFLWixDQUF4QixFQUE0QixLQUFLQyxDQUFqQyxDQUFQO0FBQ0EsQ0FGRDs7QUFJQUYsSUFBSUksU0FBSixDQUFjVyxJQUFkLEdBQXFCLFVBQVdULENBQVgsRUFBZTtBQUNuQyxPQUFNLElBQUlVLEtBQUosQ0FBVyxvRUFBWCxDQUFOO0FBQ0EsQ0FGRDs7QUFJQTs7O0FBR0FoQixJQUFJSSxTQUFKLENBQWNhLFVBQWQsR0FBMkIsVUFBV0MsQ0FBWCxFQUFlQyxDQUFmLEVBQW1CYixDQUFuQixFQUF1QjtBQUNqRGEsS0FBSWIsRUFBRUMsSUFBRixDQUFRWSxDQUFSLEVBQVliLEVBQUVELE9BQUYsQ0FBVyxLQUFLSixDQUFoQixDQUFaLENBQUo7QUFDQSxLQUFLaUIsRUFBR0MsQ0FBSCxDQUFMLEVBQWMsT0FBTyxnQkFBVyxFQUFYLEVBQWlCLEtBQUtsQixDQUF0QixFQUEwQixDQUFFLEtBQUtDLENBQVAsQ0FBMUIsQ0FBUDtBQUNkLFFBQU8sZ0JBQVcsQ0FBRSxLQUFLRCxDQUFQLENBQVgsRUFBd0IsS0FBS0MsQ0FBN0IsRUFBaUMsRUFBakMsQ0FBUDtBQUNBLENBSkQ7O0FBTUFGLElBQUlJLFNBQUosQ0FBY2dCLE1BQWQsR0FBdUIsVUFBV2QsQ0FBWCxFQUFlZSxLQUFmLEVBQXVCO0FBQzdDLEtBQUtBLHNCQUFMLEVBQ0MsT0FBTyxDQUFFLGlCQUFPZixDQUFQLEVBQVcsS0FBS0wsQ0FBaEIsRUFBb0IsS0FBS0MsQ0FBekIsRUFBNkJtQixNQUFNcEIsQ0FBbkMsQ0FBRixDQUFQO0FBQ0QsS0FBS29CLGlCQUFpQnJCLEdBQXRCLEVBQ0MsT0FBTyxDQUFFLGlCQUFPTSxDQUFQLEVBQVcsS0FBS0wsQ0FBaEIsRUFBb0IsS0FBS0MsQ0FBekIsQ0FBRixFQUFpQyxpQkFBT0ksQ0FBUCxFQUFXZSxNQUFNcEIsQ0FBakIsRUFBcUJvQixNQUFNbkIsQ0FBM0IsQ0FBakMsQ0FBUDtBQUNELEtBQUttQix3QkFBTCxFQUNDLE9BQU8sQ0FBRSxpQkFBT2YsQ0FBUCxFQUFXLEtBQUtMLENBQWhCLEVBQW9CLEtBQUtDLENBQXpCLEVBQTZCbUIsTUFBTXBCLENBQW5DLENBQUYsRUFBMkMsaUJBQU9LLENBQVAsRUFBV2UsTUFBTW5CLENBQWpCLEVBQXFCbUIsTUFBTUMsQ0FBM0IsQ0FBM0MsQ0FBUDtBQUNELFFBQU8sQ0FBRSxpQkFBT2hCLENBQVAsRUFBVyxLQUFLTCxDQUFoQixFQUFvQixLQUFLQyxDQUF6QixFQUE2Qm1CLE1BQU1wQixDQUFuQyxDQUFGLEVBQTJDLGlCQUFPSyxDQUFQLEVBQVdlLE1BQU1uQixDQUFqQixFQUFxQm1CLE1BQU1DLENBQTNCLEVBQStCRCxNQUFNRSxDQUFyQyxDQUEzQyxDQUFQO0FBQ0EsQ0FSRDs7QUFVQXZCLElBQUlJLFNBQUosQ0FBY29CLEtBQWQsR0FBc0IsWUFBYTtBQUNsQyxRQUFPLENBQUUsS0FBS3ZCLENBQVAsRUFBVyxLQUFLQyxDQUFoQixDQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiIyLVR3by5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZ2l0ICwgT25lICwgVGhyZWUgfSBmcm9tICcuJyA7XG5pbXBvcnQgeyBub2RlMiAsIG5vZGUzIH0gZnJvbSAnLi4vMi1ub2RlJyA7XG5pbXBvcnQgeyBTcGxpdCB9IGZyb20gJy4uLzAtY29yZScgO1xuXG5leHBvcnQgZnVuY3Rpb24gVHdvICggYSAsIGIgKSB7XG5cdHRoaXMuYSA9IGEgO1xuXHR0aGlzLmIgPSBiIDtcblx0dGhpcy52ID0gbnVsbCA7XG59XG5cblR3by5wcm90b3R5cGUgPSBuZXcgRGlnaXQoICkgO1xuXG5Ud28ucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbiAoIE0gKSB7XG5cdGlmICggdGhpcy52ID09PSBudWxsICkgdGhpcy52ID0gTS5wbHVzKCBNLm1lYXN1cmUoIHRoaXMuYSApICwgTS5tZWFzdXJlKCB0aGlzLmIgKSApIDtcblx0cmV0dXJuIHRoaXMudiA7XG59IDtcblxuVHdvLnByb3RvdHlwZS5oZWFkID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMuYSA7XG59IDtcblxuVHdvLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMuYiA7XG59IDtcblxuVHdvLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIG5ldyBPbmUoIHRoaXMuYSApIDtcbn0gO1xuXG5Ud28ucHJvdG90eXBlLnRhaWwgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IE9uZSggdGhpcy5iICkgO1xufSA7XG5cblR3by5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgVGhyZWUoIHRoaXMuYSAsIHRoaXMuYiAsIHZhbHVlICkgO1xufSA7XG5cblR3by5wcm90b3R5cGUuY29ucyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgVGhyZWUoIHZhbHVlICwgdGhpcy5hICwgdGhpcy5iICkgO1xufSA7XG5cblR3by5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uICggTSApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlR3byBzaG91bGQgbmV2ZXIgYmUgY29udmVydGVkIHRvIE5vZGUyIHdpdGggY3VycmVudCBpbXBsZW1lbnRhdGlvblwiICkgO1xufSA7XG5cbi8qKlxuICogSXQgaXMgYXNzdW1lZCB0aGF0IHAofHRoaXN8KSBpcyB0cnVlLlxuICovXG5Ud28ucHJvdG90eXBlLnNwbGl0RGlnaXQgPSBmdW5jdGlvbiAoIHAgLCBpICwgTSApIHtcblx0aSA9IE0ucGx1cyggaSAsIE0ubWVhc3VyZSggdGhpcy5hICkgKSA7XG5cdGlmICggcCggaSApICkgcmV0dXJuIG5ldyBTcGxpdCggWyBdICwgdGhpcy5hICwgWyB0aGlzLmIgXSApIDtcblx0cmV0dXJuIG5ldyBTcGxpdCggWyB0aGlzLmEgXSAsIHRoaXMuYiAsIFsgXSApIDtcbn0gO1xuXG5Ud28ucHJvdG90eXBlLl9ub2RlcyA9IGZ1bmN0aW9uICggTSAsIG90aGVyICkge1xuXHRpZiAoIG90aGVyIGluc3RhbmNlb2YgT25lIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIG90aGVyLmEgKSBdIDtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIFR3byApXG5cdFx0cmV0dXJuIFsgbm9kZTIoIE0gLCB0aGlzLmEgLCB0aGlzLmIgKSAsIG5vZGUyKCBNICwgb3RoZXIuYSAsIG90aGVyLmIgKSBdIDtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIFRocmVlIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIG90aGVyLmEgKSAsIG5vZGUyKCBNICwgb3RoZXIuYiAsIG90aGVyLmMgKSBdIDtcblx0cmV0dXJuIFsgbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCBvdGhlci5hICkgLCBub2RlMyggTSAsIG90aGVyLmIgLCBvdGhlci5jICwgb3RoZXIuZCApIF0gO1xufSA7XG5cblR3by5wcm90b3R5cGUuX2xpc3QgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gWyB0aGlzLmEgLCB0aGlzLmIgXSA7XG59IDtcbiJdfQ==