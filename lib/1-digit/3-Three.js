"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Three = Three;

var _ = require(".");

var _node = require("../2-node");

var _core = require("../0-core");

function Three(a, b, c) {
  this.a = a;
  this.b = b;
  this.c = c;
  this.v = null;
}

Three.prototype = new _.Digit();

Three.prototype.measure = function (M) {
  if (this.v === null) this.v = M.plus(M.measure(this.a), M.plus(M.measure(this.b), M.measure(this.c)));
  return this.v;
};

Three.prototype.head = function () {
  return this.a;
};

Three.prototype.last = function () {
  return this.c;
};

Three.prototype.init = function () {
  return new _.Two(this.a, this.b);
};

Three.prototype.tail = function () {
  return new _.Two(this.b, this.c);
};

Three.prototype.push = function (value) {
  return new _.Four(this.a, this.b, this.c, value);
};

Three.prototype.cons = function (value) {
  return new _.Four(value, this.a, this.b, this.c);
};

Three.prototype.node = function (M) {
  return (0, _node.node3)(M, this.a, this.b, this.c);
};
/**
 * It is assumed that p(|this|) is true.
 */


Three.prototype.splitDigit = function (p, i, M) {
  i = M.plus(i, M.measure(this.a));
  if (p(i)) return new _core.Split([], this.a, [this.b, this.c]);
  i = M.plus(i, M.measure(this.b));
  if (p(i)) return new _core.Split([this.a], this.b, [this.c]);
  return new _core.Split([this.a, this.b], this.c, []);
};

Three.prototype._nodes = function (M, other) {
  if (other instanceof _.One) return [(0, _node.node2)(M, this.a, this.b), (0, _node.node2)(M, this.c, other.a)];
  if (other instanceof _.Two) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node2)(M, other.a, other.b)];
  if (other instanceof Three) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node3)(M, other.a, other.b, other.c)];
  return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node2)(M, other.a, other.b), (0, _node.node2)(M, other.c, other.d)];
};

Three.prototype._list = function () {
  return [this.a, this.b, this.c];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8xLWRpZ2l0LzMtVGhyZWUuanMiXSwibmFtZXMiOlsiVGhyZWUiLCJhIiwiYiIsImMiLCJ2IiwicHJvdG90eXBlIiwiRGlnaXQiLCJtZWFzdXJlIiwiTSIsInBsdXMiLCJoZWFkIiwibGFzdCIsImluaXQiLCJUd28iLCJ0YWlsIiwicHVzaCIsInZhbHVlIiwiRm91ciIsImNvbnMiLCJub2RlIiwic3BsaXREaWdpdCIsInAiLCJpIiwiU3BsaXQiLCJfbm9kZXMiLCJvdGhlciIsIk9uZSIsImQiLCJfbGlzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVPLFNBQVNBLEtBQVQsQ0FBaUJDLENBQWpCLEVBQXFCQyxDQUFyQixFQUF5QkMsQ0FBekIsRUFBNkI7QUFDbkMsT0FBS0YsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsT0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsT0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsT0FBS0MsQ0FBTCxHQUFTLElBQVQ7QUFDQTs7QUFFREosS0FBSyxDQUFDSyxTQUFOLEdBQWtCLElBQUlDLE9BQUosRUFBbEI7O0FBRUFOLEtBQUssQ0FBQ0ssU0FBTixDQUFnQkUsT0FBaEIsR0FBMEIsVUFBV0MsQ0FBWCxFQUFlO0FBQ3hDLE1BQUssS0FBS0osQ0FBTCxLQUFXLElBQWhCLEVBQXVCLEtBQUtBLENBQUwsR0FBU0ksQ0FBQyxDQUFDQyxJQUFGLENBQy9CRCxDQUFDLENBQUNELE9BQUYsQ0FBVyxLQUFLTixDQUFoQixDQUQrQixFQUUvQk8sQ0FBQyxDQUFDQyxJQUFGLENBQ0NELENBQUMsQ0FBQ0QsT0FBRixDQUFXLEtBQUtMLENBQWhCLENBREQsRUFFQ00sQ0FBQyxDQUFDRCxPQUFGLENBQVcsS0FBS0osQ0FBaEIsQ0FGRCxDQUYrQixDQUFUO0FBT3ZCLFNBQU8sS0FBS0MsQ0FBWjtBQUNBLENBVEQ7O0FBV0FKLEtBQUssQ0FBQ0ssU0FBTixDQUFnQkssSUFBaEIsR0FBdUIsWUFBYTtB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LEVBQW9CLEtBQUtDLENBQXpCLEVBQTZCLEtBQUtDLENBQWxDLENBQUYsRUFBMEMsaUJBQU9LLENBQVAsRUFBV2lCLEtBQUssQ0FBQ3hCLENBQWpCLEVBQXFCd0IsS0FBSyxDQUFDdkIsQ0FBM0IsQ0FBMUMsQ0FBUDtBQUNELE1BQUt1QixLQUFLLFlBQVl6QixLQUF0QixFQUNDLE9BQU8sQ0FBRSxpQkFBT1EsQ0FBUCxFQUFXLEtBQUtQLENBQWhCLEVBQW9CLEtBQUtDLENBQXpCLEVBQTZCLEtBQUtDLENBQWxDLENBQUYsRUFBMEMsaUJBQU9LLENBQVAsRUFBV2lCLEtBQUssQ0FBQ3hCLENBQWpCLEVBQXFCd0IsS0FBSyxDQUFDdkIsQ0FBM0IsRUFBK0J1QixLQUFLLENBQUN0QixDQUFyQyxDQUExQyxDQUFQO0FBQ0QsU0FBTyxDQUFFLGlCQUFPSyxDQUFQLEVBQVcsS0FBS1AsQ0FBaEIsRUFBb0IsS0FBS0MsQ0FBekIsRUFBNkIsS0FBS0MsQ0FBbEMsQ0FBRixFQUEwQyxpQkFBT0ssQ0FBUCxFQUFXaUIsS0FBSyxDQUFDeEIsQ0FBakIsRUFBcUJ3QixLQUFLLENBQUN2QixDQUEzQixDQUExQyxFQUEyRSxpQkFBT00sQ0FBUCxFQUFXaUIsS0FBSyxDQUFDdEIsQ0FBakIsRUFBcUJzQixLQUFLLENBQUNFLENBQTNCLENBQTNFLENBQVA7QUFDQSxDQVJEOztBQVVBM0IsS0FBSyxDQUFDSyxTQUFOLENBQWdCdUIsS0FBaEIsR0FBd0IsWUFBYTtBQUNwQyxTQUFPLENBQUUsS0FBSzNCLENBQVAsRUFBVyxLQUFLQyxDQUFoQixFQUFvQixLQUFLQyxDQUF6QixDQUFQO0FBQ0EsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZ2l0ICwgT25lICwgVHdvICwgRm91ciB9IGZyb20gJy4nIDtcbmltcG9ydCB7IG5vZGUyICwgbm9kZTMgfSBmcm9tICcuLi8yLW5vZGUnIDtcbmltcG9ydCB7IFNwbGl0IH0gZnJvbSAnLi4vMC1jb3JlJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUaHJlZSAoIGEgLCBiICwgYyApIHtcblx0dGhpcy5hID0gYSA7XG5cdHRoaXMuYiA9IGIgO1xuXHR0aGlzLmMgPSBjIDtcblx0dGhpcy52ID0gbnVsbCA7XG59XG5cblRocmVlLnByb3RvdHlwZSA9IG5ldyBEaWdpdCggKSA7XG5cblRocmVlLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24gKCBNICkge1xuXHRpZiAoIHRoaXMudiA9PT0gbnVsbCApIHRoaXMudiA9IE0ucGx1cyhcblx0XHRNLm1lYXN1cmUoIHRoaXMuYSApICxcblx0XHRNLnBsdXMoXG5cdFx0XHRNLm1lYXN1cmUoIHRoaXMuYiApICxcblx0XHRcdE0ubWVhc3VyZSggdGhpcy5jIClcblx0XHQpXG5cdCkgO1xuXHRyZXR1cm4gdGhpcy52IDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUuaGVhZCA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiB0aGlzLmEgO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMuYyA7XG59IDtcblxuVGhyZWUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IFR3byggdGhpcy5hICwgdGhpcy5iICkgO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS50YWlsID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIG5ldyBUd28oIHRoaXMuYiAsIHRoaXMuYyApIDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgRm91ciggdGhpcy5hICwgdGhpcy5iICwgdGhpcy5jICwgdmFsdWUgKSA7XG59IDtcblxuVGhyZWUucHJvdG90eXBlLmNvbnMgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXHRyZXR1cm4gbmV3IEZvdXIoIHZhbHVlICwgdGhpcy5hICwgdGhpcy5iICwgdGhpcy5jICkgO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24gKCBNICkge1xuXHRyZXR1cm4gbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgKSA7XG59IDtcblxuLyoqXG4gKiBJdCBpcyBhc3N1bWVkIHRoYXQgcCh8dGhpc3wpIGlzIHRydWUuXG4gKi9cblRocmVlLnByb3RvdHlwZS5zcGxpdERpZ2l0ID0gZnVuY3Rpb24gKCBwICwgaSAsIE0gKSB7XG5cdGkgPSBNLnBsdXMoIGkgLCBNLm1lYXN1cmUoIHRoaXMuYSApICkgO1xuXHRpZiAoIHAoIGkgKSApIHJldHVybiBuZXcgU3BsaXQoIFsgXSAsIHRoaXMuYSAsIFsgdGhpcy5iICwgdGhpcy5jIF0gKSA7XG5cdGkgPSBNLnBsdXMoIGkgLCBNLm1lYXN1cmUoIHRoaXMuYiApICkgO1xuXHRpZiAoIHAoIGkgKSApIHJldHVybiBuZXcgU3BsaXQoIFsgdGhpcy5hIF0gLCB0aGlzLmIgLCBbIHRoaXMuYyBdICkgO1xuXHRyZXR1cm4gbmV3IFNwbGl0KCBbIHRoaXMuYSAsIHRoaXMuYiBdICwgdGhpcy5jICwgWyBdICkgO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS5fbm9kZXMgPSBmdW5jdGlvbiAoIE0gLCBvdGhlciApIHtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIE9uZSApXG5cdFx0cmV0dXJuIFsgbm9kZTIoIE0gLCB0aGlzLmEgLCB0aGlzLmIgKSAsIG5vZGUyKCBNICwgdGhpcy5jICwgb3RoZXIuYSApIF0gO1xuXHRpZiAoIG90aGVyIGluc3RhbmNlb2YgVHdvIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyApICwgbm9kZTIoIE0gLCBvdGhlci5hICwgb3RoZXIuYiApIF0gO1xuXHRpZiAoIG90aGVyIGluc3RhbmNlb2YgVGhyZWUgKVxuXHRcdHJldHVybiBbIG5vZGUzKCBNICwgdGhpcy5hICwgdGhpcy5iICwgdGhpcy5jICkgLCBub2RlMyggTSAsIG90aGVyLmEgLCBvdGhlci5iICwgb3RoZXIuYyApIF0gO1xuXHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyApICwgbm9kZTIoIE0gLCBvdGhlci5hICwgb3RoZXIuYiApICwgbm9kZTIoIE0gLCBvdGhlci5jICwgb3RoZXIuZCApIF0gO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS5fbGlzdCA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiBbIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyBdIDtcbn0gO1xuXG4iXX0=