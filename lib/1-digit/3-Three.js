'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Three = Three;

var _ = require('.');

var _node = require('../2-node');

var _core = require('../0-core');

function Three(a, b, c) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.v = null;
}

Three.prototype = new _.Digit();

Three.prototype.measure = function (M) {
	if (this.v === null) this.v = M.plus(M.measure(this.a), M.plus(M.measure(this.b), M.measure(this.c)));
	return this.v;
};

Three.prototype.head = function () {
	return this.a;
};

Three.prototype.last = function () {
	return this.c;
};

Three.prototype.init = function () {
	return new _.Two(this.a, this.b);
};

Three.prototype.tail = function () {
	return new _.Two(this.b, this.c);
};

Three.prototype.push = function (value) {
	return new _.Four(this.a, this.b, this.c, value);
};

Three.prototype.cons = function (value) {
	return new _.Four(value, this.a, this.b, this.c);
};

Three.prototype.node = function (M) {
	return (0, _node.node3)(M, this.a, this.b, this.c);
};

/**
 * It is assumed that p(|this|) is true.
 */
Three.prototype.splitDigit = function (p, i, M) {
	i = M.plus(i, M.measure(this.a));
	if (p(i)) return new _core.Split([], this.a, [this.b, this.c]);
	i = M.plus(i, M.measure(this.b));
	if (p(i)) return new _core.Split([this.a], this.b, [this.c]);
	return new _core.Split([this.a, this.b], this.c, []);
};

Three.prototype._nodes = function (M, other) {
	if (other instanceof _.One) return [(0, _node.node2)(M, this.a, this.b), (0, _node.node2)(M, this.c, other.a)];
	if (other instanceof _.Two) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node2)(M, other.a, other.b)];
	if (other instanceof Three) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node3)(M, other.a, other.b, other.c)];
	return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node2)(M, other.a, other.b), (0, _node.node2)(M, other.c, other.d)];
};

Three.prototype._list = function () {
	return [this.a, this.b, this.c];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8xLWRpZ2l0LzMtVGhyZWUuanMiXSwibmFtZXMiOlsiVGhyZWUiLCJhIiwiYiIsImMiLCJ2IiwicHJvdG90eXBlIiwibWVhc3VyZSIsIk0iLCJwbHVzIiwiaGVhZCIsImxhc3QiLCJpbml0IiwidGFpbCIsInB1c2giLCJ2YWx1ZSIsImNvbnMiLCJub2RlIiwic3BsaXREaWdpdCIsInAiLCJpIiwiX25vZGVzIiwib3RoZXIiLCJkIiwiX2xpc3QiXSwibWFwcGluZ3MiOiI7Ozs7O1FBSWdCQSxLLEdBQUFBLEs7O0FBSmhCOztBQUNBOztBQUNBOztBQUVPLFNBQVNBLEtBQVQsQ0FBaUJDLENBQWpCLEVBQXFCQyxDQUFyQixFQUF5QkMsQ0FBekIsRUFBNkI7QUFDbkMsTUFBS0YsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsTUFBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsTUFBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsTUFBS0MsQ0FBTCxHQUFTLElBQVQ7QUFDQTs7QUFFREosTUFBTUssU0FBTixHQUFrQixhQUFsQjs7QUFFQUwsTUFBTUssU0FBTixDQUFnQkMsT0FBaEIsR0FBMEIsVUFBV0MsQ0FBWCxFQUFlO0FBQ3hDLEtBQUssS0FBS0gsQ0FBTCxLQUFXLElBQWhCLEVBQXVCLEtBQUtBLENBQUwsR0FBU0csRUFBRUMsSUFBRixDQUMvQkQsRUFBRUQsT0FBRixDQUFXLEtBQUtMLENBQWhCLENBRCtCLEVBRS9CTSxFQUFFQyxJQUFGLENBQ0NELEVBQUVELE9BQUYsQ0FBVyxLQUFLSixDQUFoQixDQURELEVBRUNLLEVBQUVELE9BQUYsQ0FBVyxLQUFLSCxDQUFoQixDQUZELENBRitCLENBQVQ7QUFPdkIsUUFBTyxLQUFLQyxDQUFaO0FBQ0EsQ0FURDs7QUFXQUosTUFBTUssU0FBTixDQUFnQkksSUFBaEIsR0FBdUIsWUFBYTtBQUNuQyxRQUFPLEtBQUtSLENBQVo7QUFDQSxDQUZEOztBQUlBRCxNQUFNSyxTQUFOLENBQWdCSyxJQUFoQixHQUF1QixZ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TW5CLENBQTNCLEVBQStCbUIsTUFBTWxCLENBQXJDLENBQTFDLENBQVA7QUFDRCxRQUFPLENBQUUsaUJBQU9JLENBQVAsRUFBVyxLQUFLTixDQUFoQixFQUFvQixLQUFLQyxDQUF6QixFQUE2QixLQUFLQyxDQUFsQyxDQUFGLEVBQTBDLGlCQUFPSSxDQUFQLEVBQVdjLE1BQU1wQixDQUFqQixFQUFxQm9CLE1BQU1uQixDQUEzQixDQUExQyxFQUEyRSxpQkFBT0ssQ0FBUCxFQUFXYyxNQUFNbEIsQ0FBakIsRUFBcUJrQixNQUFNQyxDQUEzQixDQUEzRSxDQUFQO0FBQ0EsQ0FSRDs7QUFVQXRCLE1BQU1LLFNBQU4sQ0FBZ0JrQixLQUFoQixHQUF3QixZQUFhO0FBQ3BDLFFBQU8sQ0FBRSxLQUFLdEIsQ0FBUCxFQUFXLEtBQUtDLENBQWhCLEVBQW9CLEtBQUtDLENBQXpCLENBQVA7QUFDQSxDQUZEIiwiZmlsZSI6IjMtVGhyZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWdpdCAsIE9uZSAsIFR3byAsIEZvdXIgfSBmcm9tICcuJyA7XG5pbXBvcnQgeyBub2RlMiAsIG5vZGUzIH0gZnJvbSAnLi4vMi1ub2RlJyA7XG5pbXBvcnQgeyBTcGxpdCB9IGZyb20gJy4uLzAtY29yZScgO1xuXG5leHBvcnQgZnVuY3Rpb24gVGhyZWUgKCBhICwgYiAsIGMgKSB7XG5cdHRoaXMuYSA9IGEgO1xuXHR0aGlzLmIgPSBiIDtcblx0dGhpcy5jID0gYyA7XG5cdHRoaXMudiA9IG51bGwgO1xufVxuXG5UaHJlZS5wcm90b3R5cGUgPSBuZXcgRGlnaXQoICkgO1xuXG5UaHJlZS5wcm90b3R5cGUubWVhc3VyZSA9IGZ1bmN0aW9uICggTSApIHtcblx0aWYgKCB0aGlzLnYgPT09IG51bGwgKSB0aGlzLnYgPSBNLnBsdXMoXG5cdFx0TS5tZWFzdXJlKCB0aGlzLmEgKSAsXG5cdFx0TS5wbHVzKFxuXHRcdFx0TS5tZWFzdXJlKCB0aGlzLmIgKSAsXG5cdFx0XHRNLm1lYXN1cmUoIHRoaXMuYyApXG5cdFx0KVxuXHQpIDtcblx0cmV0dXJuIHRoaXMudiA7XG59IDtcblxuVGhyZWUucHJvdG90eXBlLmhlYWQgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gdGhpcy5hIDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiB0aGlzLmMgO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIG5ldyBUd28oIHRoaXMuYSAsIHRoaXMuYiApIDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUudGFpbCA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiBuZXcgVHdvKCB0aGlzLmIgLCB0aGlzLmMgKSA7XG59IDtcblxuVGhyZWUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXHRyZXR1cm4gbmV3IEZvdXIoIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyAsIHZhbHVlICkgO1xufSA7XG5cblRocmVlLnByb3RvdHlwZS5jb25zID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblx0cmV0dXJuIG5ldyBGb3VyKCB2YWx1ZSAsIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyApIDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uICggTSApIHtcblx0cmV0dXJuIG5vZGUzKCBNICwgdGhpcy5hICwgdGhpcy5iICwgdGhpcy5jICkgO1xufSA7XG5cbi8qKlxuICogSXQgaXMgYXNzdW1lZCB0aGF0IHAofHRoaXN8KSBpcyB0cnVlLlxuICovXG5UaHJlZS5wcm90b3R5cGUuc3BsaXREaWdpdCA9IGZ1bmN0aW9uICggcCAsIGkgLCBNICkge1xuXHRpID0gTS5wbHVzKCBpICwgTS5tZWFzdXJlKCB0aGlzLmEgKSApIDtcblx0aWYgKCBwKCBpICkgKSByZXR1cm4gbmV3IFNwbGl0KCBbIF0gLCB0aGlzLmEgLCBbIHRoaXMuYiAsIHRoaXMuYyBdICkgO1xuXHRpID0gTS5wbHVzKCBpICwgTS5tZWFzdXJlKCB0aGlzLmIgKSApIDtcblx0aWYgKCBwKCBpICkgKSByZXR1cm4gbmV3IFNwbGl0KCBbIHRoaXMuYSBdICwgdGhpcy5iICwgWyB0aGlzLmMgXSApIDtcblx0cmV0dXJuIG5ldyBTcGxpdCggWyB0aGlzLmEgLCB0aGlzLmIgXSAsIHRoaXMuYyAsIFsgXSApIDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUuX25vZGVzID0gZnVuY3Rpb24gKCBNICwgb3RoZXIgKSB7XG5cdGlmICggb3RoZXIgaW5zdGFuY2VvZiBPbmUgKVxuXHRcdHJldHVybiBbIG5vZGUyKCBNICwgdGhpcy5hICwgdGhpcy5iICkgLCBub2RlMiggTSAsIHRoaXMuYyAsIG90aGVyLmEgKSBdIDtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIFR3byApXG5cdFx0cmV0dXJuIFsgbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgKSAsIG5vZGUyKCBNICwgb3RoZXIuYSAsIG90aGVyLmIgKSBdIDtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIFRocmVlIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyApICwgbm9kZTMoIE0gLCBvdGhlci5hICwgb3RoZXIuYiAsIG90aGVyLmMgKSBdIDtcblx0cmV0dXJuIFsgbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgKSAsIG5vZGUyKCBNICwgb3RoZXIuYSAsIG90aGVyLmIgKSAsIG5vZGUyKCBNICwgb3RoZXIuYyAsIG90aGVyLmQgKSBdIDtcbn0gO1xuXG5UaHJlZS5wcm90b3R5cGUuX2xpc3QgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gWyB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgXSA7XG59IDtcblxuIl19