'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Four = Four;

var _ = require('.');

var _node = require('../2-node');

var _core = require('../0-core');

function Four(a, b, c, d) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.v = null;
}

Four.prototype = new _.Digit();

Four.prototype.measure = function (M) {
	if (this.v === null) this.v = M.plus(M.measure(this.a), M.plus(M.measure(this.b), M.plus(M.measure(this.c), M.measure(this.d))));
	return this.v;
};

Four.prototype.head = function () {
	return this.a;
};

Four.prototype.last = function () {
	return this.d;
};

Four.prototype.init = function () {
	return new _.Three(this.a, this.b, this.c);
};

Four.prototype.tail = function () {
	return new _.Three(this.b, this.c, this.d);
};

Four.prototype.push = function (value) {
	throw new Error("cannot push digit Four");
};

Four.prototype.cons = function (value) {
	throw new Error("cannot cons digit Four");
};

Four.prototype.node = function (M) {
	throw new Error("cannot convert Four to node");
};

/**
 * It is assumed that p(|this|) is true.
 */
Four.prototype.splitDigit = function (p, i, M) {
	i = M.plus(i, M.measure(this.a));
	if (p(i)) return new _core.Split([], this.a, [this.b, this.c, this.d]);
	i = M.plus(i, M.measure(this.b));
	if (p(i)) return new _core.Split([this.a], this.b, [this.c, this.d]);
	i = M.plus(i, M.measure(this.c));
	if (p(i)) return new _core.Split([this.a, this.b], this.c, [this.d]);
	return new _core.Split([this.a, this.b, this.c], this.d, []);
};

Four.prototype._nodes = function (M, other) {
	if (other instanceof _.One) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node2)(M, this.d, other.a)];
	if (other instanceof _.Two) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node3)(M, this.d, other.a, other.b)];
	if (other instanceof _.Three) return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node2)(M, this.d, other.a), (0, _node.node2)(M, other.b, other.c)];
	return [(0, _node.node3)(M, this.a, this.b, this.c), (0, _node.node3)(M, this.d, other.a, other.b), (0, _node.node2)(M, other.c, other.d)];
};

Four.prototype._list = function () {
	return [this.a, this.b, this.c, this.d];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8xLWRpZ2l0LzQtRm91ci5qcyJdLCJuYW1lcyI6WyJGb3VyIiwiYSIsImIiLCJjIiwiZCIsInYiLCJwcm90b3R5cGUiLCJtZWFzdXJlIiwiTSIsInBsdXMiLCJoZWFkIiwibGFzdCIsImluaXQiLCJ0YWlsIiwicHVzaCIsInZhbHVlIiwiRXJyb3IiLCJjb25zIiwibm9kZSIsInNwbGl0RGlnaXQiLCJwIiwiaSIsIl9ub2RlcyIsIm90aGVyIiwiX2xpc3QiXSwibWFwcGluZ3MiOiI7Ozs7O1FBSWdCQSxJLEdBQUFBLEk7O0FBSmhCOztBQUNBOztBQUNBOztBQUVPLFNBQVNBLElBQVQsQ0FBZ0JDLENBQWhCLEVBQW9CQyxDQUFwQixFQUF3QkMsQ0FBeEIsRUFBNEJDLENBQTVCLEVBQWdDO0FBQ3RDLE1BQUtILENBQUwsR0FBU0EsQ0FBVDtBQUNBLE1BQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE1BQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE1BQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE1BQUtDLENBQUwsR0FBUyxJQUFUO0FBQ0E7O0FBRURMLEtBQUtNLFNBQUwsR0FBaUIsYUFBakI7O0FBRUFOLEtBQUtNLFNBQUwsQ0FBZUMsT0FBZixHQUF5QixVQUFXQyxDQUFYLEVBQWU7QUFDdkMsS0FBSyxLQUFLSCxDQUFMLEtBQVcsSUFBaEIsRUFBdUIsS0FBS0EsQ0FBTCxHQUFTRyxFQUFFQyxJQUFGLENBQy9CRCxFQUFFRCxPQUFGLENBQVcsS0FBS04sQ0FBaEIsQ0FEK0IsRUFFL0JPLEVBQUVDLElBQUYsQ0FDQ0QsRUFBRUQsT0FBRixDQUFXLEtBQUtMLENBQWhCLENBREQsRUFFQ00sRUFBRUMsSUFBRixDQUNDRCxFQUFFRCxPQUFGLENBQVcsS0FBS0osQ0FBaEIsQ0FERCxFQUVDSyxFQUFFRCxPQUFGLENBQVcsS0FBS0gsQ0FBaEIsQ0FGRCxDQUZELENBRitCLENBQVQ7QUFVdkIsUUFBTyxLQUFLQyxDQUFaO0FBQ0EsQ0FaRDs7QUFjQUws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VyxLQUFLUCxDQUFoQixFQUFvQixLQUFLQyxDQUF6QixFQUE2QixLQUFLQyxDQUFsQyxDQUFGLEVBQTBDLGlCQUFPSyxDQUFQLEVBQVcsS0FBS0osQ0FBaEIsRUFBb0JtQixNQUFNdEIsQ0FBMUIsRUFBOEJzQixNQUFNckIsQ0FBcEMsQ0FBMUMsQ0FBUDtBQUNELEtBQUtxQix3QkFBTCxFQUNDLE9BQU8sQ0FBRSxpQkFBT2YsQ0FBUCxFQUFXLEtBQUtQLENBQWhCLEVBQW9CLEtBQUtDLENBQXpCLEVBQTZCLEtBQUtDLENBQWxDLENBQUYsRUFBMEMsaUJBQU9LLENBQVAsRUFBVyxLQUFLSixDQUFoQixFQUFvQm1CLE1BQU10QixDQUExQixDQUExQyxFQUEwRSxpQkFBT08sQ0FBUCxFQUFXZSxNQUFNckIsQ0FBakIsRUFBcUJxQixNQUFNcEIsQ0FBM0IsQ0FBMUUsQ0FBUDtBQUNELFFBQU8sQ0FBRSxpQkFBT0ssQ0FBUCxFQUFXLEtBQUtQLENBQWhCLEVBQW9CLEtBQUtDLENBQXpCLEVBQTZCLEtBQUtDLENBQWxDLENBQUYsRUFBMEMsaUJBQU9LLENBQVAsRUFBVyxLQUFLSixDQUFoQixFQUFvQm1CLE1BQU10QixDQUExQixFQUE4QnNCLE1BQU1yQixDQUFwQyxDQUExQyxFQUFvRixpQkFBT00sQ0FBUCxFQUFXZSxNQUFNcEIsQ0FBakIsRUFBcUJvQixNQUFNbkIsQ0FBM0IsQ0FBcEYsQ0FBUDtBQUNBLENBUkQ7O0FBVUFKLEtBQUtNLFNBQUwsQ0FBZWtCLEtBQWYsR0FBdUIsWUFBYTtBQUNuQyxRQUFPLENBQUUsS0FBS3ZCLENBQVAsRUFBVyxLQUFLQyxDQUFoQixFQUFvQixLQUFLQyxDQUF6QixFQUE2QixLQUFLQyxDQUFsQyxDQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiI0LUZvdXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWdpdCAsIE9uZSAsIFR3byAsIFRocmVlIH0gZnJvbSAnLicgO1xuaW1wb3J0IHsgbm9kZTIgLCBub2RlMyB9IGZyb20gJy4uLzItbm9kZScgO1xuaW1wb3J0IHsgU3BsaXQgfSBmcm9tICcuLi8wLWNvcmUnIDtcblxuZXhwb3J0IGZ1bmN0aW9uIEZvdXIgKCBhICwgYiAsIGMgLCBkICkge1xuXHR0aGlzLmEgPSBhIDtcblx0dGhpcy5iID0gYiA7XG5cdHRoaXMuYyA9IGMgO1xuXHR0aGlzLmQgPSBkIDtcblx0dGhpcy52ID0gbnVsbCA7XG59XG5cbkZvdXIucHJvdG90eXBlID0gbmV3IERpZ2l0KCApIDtcblxuRm91ci5wcm90b3R5cGUubWVhc3VyZSA9IGZ1bmN0aW9uICggTSApIHtcblx0aWYgKCB0aGlzLnYgPT09IG51bGwgKSB0aGlzLnYgPSBNLnBsdXMoXG5cdFx0TS5tZWFzdXJlKCB0aGlzLmEgKSAsXG5cdFx0TS5wbHVzKFxuXHRcdFx0TS5tZWFzdXJlKCB0aGlzLmIgKSAsXG5cdFx0XHRNLnBsdXMoXG5cdFx0XHRcdE0ubWVhc3VyZSggdGhpcy5jICkgLFxuXHRcdFx0XHRNLm1lYXN1cmUoIHRoaXMuZCApXG5cdFx0XHQpXG5cdFx0KVxuXHQpIDtcblx0cmV0dXJuIHRoaXMudiA7XG59IDtcblxuRm91ci5wcm90b3R5cGUuaGVhZCA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiB0aGlzLmEgO1xufSA7XG5cbkZvdXIucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gdGhpcy5kIDtcbn0gO1xuXG5Gb3VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIG5ldyBUaHJlZSggdGhpcy5hICwgdGhpcy5iICwgdGhpcy5jICkgO1xufSA7XG5cbkZvdXIucHJvdG90eXBlLnRhaWwgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IFRocmVlKCB0aGlzLmIgLCB0aGlzLmMgLCB0aGlzLmQgKSA7XG59IDtcblxuRm91ci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJjYW5ub3QgcHVzaCBkaWdpdCBGb3VyXCIgKSA7XG59IDtcblxuRm91ci5wcm90b3R5cGUuY29ucyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJjYW5ub3QgY29ucyBkaWdpdCBGb3VyXCIgKSA7XG59IDtcblxuRm91ci5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uICggTSApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcImNhbm5vdCBjb252ZXJ0IEZvdXIgdG8gbm9kZVwiICkgO1xufSA7XG5cbi8qKlxuICogSXQgaXMgYXNzdW1lZCB0aGF0IHAofHRoaXN8KSBpcyB0cnVlLlxuICovXG5Gb3VyLnByb3RvdHlwZS5zcGxpdERpZ2l0ID0gZnVuY3Rpb24gKCBwICwgaSAsIE0gKSB7XG5cdGkgPSBNLnBsdXMoIGkgLCBNLm1lYXN1cmUoIHRoaXMuYSApICkgO1xuXHRpZiAoIHAoIGkgKSApIHJldHVybiBuZXcgU3BsaXQoIFsgXSAsIHRoaXMuYSAsIFsgdGhpcy5iICwgdGhpcy5jICwgdGhpcy5kIF0gKSA7XG5cdGkgPSBNLnBsdXMoIGkgLCBNLm1lYXN1cmUoIHRoaXMuYiApICkgO1xuXHRpZiAoIHAoIGkgKSApIHJldHVybiBuZXcgU3BsaXQoIFsgdGhpcy5hIF0gLCB0aGlzLmIgLCBbIHRoaXMuYyAsIHRoaXMuZCBdICkgO1xuXHRpID0gTS5wbHVzKCBpICwgTS5tZWFzdXJlKCB0aGlzLmMgKSApIDtcblx0aWYgKCBwKCBpICkgKSByZXR1cm4gbmV3IFNwbGl0KCBbIHRoaXMuYSAsIHRoaXMuYiBdICwgdGhpcy5jICwgWyB0aGlzLmQgXSApIDtcblx0cmV0dXJuIG5ldyBTcGxpdCggWyB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgXSAsIHRoaXMuZCAsIFsgXSApIDtcbn0gO1xuXG5Gb3VyLnByb3RvdHlwZS5fbm9kZXMgPSBmdW5jdGlvbiAoIE0gLCBvdGhlciApIHtcblx0aWYgKCBvdGhlciBpbnN0YW5jZW9mIE9uZSApXG5cdFx0cmV0dXJuIFsgbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgKSAsIG5vZGUyKCBNICwgdGhpcy5kICwgb3RoZXIuYSApIF0gO1xuXHRpZiAoIG90aGVyIGluc3RhbmNlb2YgVHdvIClcblx0XHRyZXR1cm4gWyBub2RlMyggTSAsIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyApICwgbm9kZTMoIE0gLCB0aGlzLmQgLCBvdGhlci5hICwgb3RoZXIuYiApIF0gO1xuXHRpZiAoIG90aGVyIGluc3RhbmNlb2YgVGhyZWUgKVxuXHRcdHJldHVybiBbIG5vZGUzKCBNICwgdGhpcy5hICwgdGhpcy5iICwgdGhpcy5jICkgLCBub2RlMiggTSAsIHRoaXMuZCAsIG90aGVyLmEgKSAsIG5vZGUyKCBNICwgb3RoZXIuYiAsIG90aGVyLmMgKSBdIDtcblx0cmV0dXJuIFsgbm9kZTMoIE0gLCB0aGlzLmEgLCB0aGlzLmIgLCB0aGlzLmMgKSAsIG5vZGUzKCBNICwgdGhpcy5kICwgb3RoZXIuYSAsIG90aGVyLmIgKSAsIG5vZGUyKCBNICwgb3RoZXIuYyAsIG90aGVyLmQgKSBdIDtcbn0gO1xuXG5Gb3VyLnByb3RvdHlwZS5fbGlzdCA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiBbIHRoaXMuYSAsIHRoaXMuYiAsIHRoaXMuYyAsIHRoaXMuZCBdIDtcbn0gO1xuIl19