"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Single = Single;

var _base = require("../base");

var _ = require(".");

var _core = require("../../0-core");

var _digit = require("../../1-digit");

function Single(M, element) {
  this.M = M;
  this.element = element;
  this.v = M.measure(element);
}

Single.prototype = new _base.Tree();

Single.prototype.measure = function () {
  return this.v;
};

Single.prototype.empty = function () {
  return false;
};

Single.prototype.head = function () {
  return this.element;
};

Single.prototype.last = function () {
  return this.element;
};

Single.prototype.tail = function () {
  return new _.Empty(this.M);
};

Single.prototype.init = function () {
  return new _.Empty(this.M);
};

Single.prototype.cons = function (value) {
  return new _.Deep(this.M, new _digit.One(value), new _.Empty((0, _core.cache)(this.M)), new _digit.One(this.element));
};

Single.prototype.push = function (value) {
  return new _.Deep(this.M, new _digit.One(this.element), new _.Empty((0, _core.cache)(this.M)), new _digit.One(value));
};

Single.prototype.concat = function (other) {
  return other.cons(this.element);
};

Single.prototype[Symbol.iterator] =
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return this.element;

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
});
/**
 * It is assumed that p(|this|) is true.
 */

Single.prototype.splitTree = function (p, i) {
  return new _core.Split(new _.Empty(this.M), this.element, new _.Empty(this.M));
};

Single.prototype.split = function (p) {
  return p(this.measure()) ? [new _.Empty(this.M), this] : [this, new _.Empty(this.M)];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy8zLXRyZWUvaW1wbGVtZW50YXRpb25zLzEtU2luZ2xlLmpzIl0sIm5hbWVzIjpbIlNpbmdsZSIsIk0iLCJlbGVtZW50IiwidiIsIm1lYXN1cmUiLCJwcm90b3R5cGUiLCJUcmVlIiwiZW1wdHkiLCJoZWFkIiwibGFzdCIsInRhaWwiLCJFbXB0eSIsImluaXQiLCJjb25zIiwidmFsdWUiLCJEZWVwIiwiT25lIiwicHVzaCIsImNvbmNhdCIsIm90aGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdFRyZWUiLCJwIiwiaSIsIlNwbGl0Iiwic3BsaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFTyxTQUFTQSxNQUFULENBQWtCQyxDQUFsQixFQUFzQkMsT0FBdEIsRUFBZ0M7QUFDdEMsT0FBS0QsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsT0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsT0FBS0MsQ0FBTCxHQUFTRixDQUFDLENBQUNHLE9BQUYsQ0FBV0YsT0FBWCxDQUFUO0FBQ0E7O0FBRURGLE1BQU0sQ0FBQ0ssU0FBUCxHQUFtQixJQUFJQyxVQUFKLEVBQW5COztBQUVBTixNQUFNLENBQUNLLFNBQVAsQ0FBaUJELE9BQWpCLEdBQTJCLFlBQWE7QUFDdkMsU0FBTyxLQUFLRCxDQUFaO0FBQ0EsQ0FGRDs7QUFJQUgsTUFBTSxDQUFDSyxTQUFQLENBQWlCRSxLQUFqQixHQUF5QixZQUFhO0FBQ3JDLFNBQU8sS0FBUDtBQUNBLENBRkQ7O0FBSUFQLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkcsSUFBakIsR0FBd0IsWUFBYTtBQUNwQyxTQUFPLEtBQUtOLE9BQVo7QUFDQSxDQUZEOztBQUlBRixNQUFNLENBQUNLLFNBQVAsQ0FBaUJJLElBQWpCLEdBQXdCLFlBQWE7QUFDcEMsU0FBTyxLQUFLUCxPQUFaO0FBQ0EsQ0FGRDs7QUFJQUYsTUFBTSxDQUFDSyxTQUFQLENBQWlCSyxJQUFqQixHQUF3QixZQUFhO0FBQ3BDLFNBQU8sSUFBSUMsT0FBSixDQUFXLEtBQUtWLENBQWhCLENBQVA7QUFDQSxDQUZEOztBQUlBRCxNQUFNLENBQUNLLFNBQVAsQ0FBaUJPLElBQWpCLEdBQXdCLFlBQWE7QUFDcEMsU0FBTyxJQUFJRCxPQUFKLENBQVcsS0FBS1YsQ0FBaEIsQ0FBUDtBQUNBLENBRkQ7O0FBSUFELE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQlEsSUFBakIsR0FBd0IsVUFBV0MsS0FBWCxFQUFtQjtBQUMxQyxTQUFPLElBQUlDLE1BQUosQ0FDTixLQUFLZCxDQURDLEVBRU4sSUFBSWUsVUFBSixDQUFTRixLQUFULENBRk0sRUFHTixJQUFJSCxPQUFKLENBQVcsaUJBQU8sS0FBS1YsQ0FBWixDQUFYLENBSE0sRUFJTixJQUFJZSxVQUFKLENBQVMsS0FBS2QsT0FBZCxDQUpNLENBQVA7QUFNQSxDQVBEOztBQVNBRixNQUFNLENBQUNLLFNBQVAsQ0FBaUJZLElBQWpCLEdBQXdCLFVBQVdILEtBQVgsRUFBbUI7QUFDMUMsU0FBTyxJQUFJQyxNQUFKLENBQ04sS0FBS2QsQ0FEQyxFQUVOLElBQUllLFVBQUosQ0FBUyxLQUFLZCxPQUFkLENBRk0sRUFHTixJQUFJUyxPQUFKLENBQVcsaUJBQU8sS0FBS1YsQ0FBWixDQUFYLENBSE0sRUFJTixJQUFJZSxVQUFKLENBQVNGLEtBQVQsQ0FKTSxDQUFQO0FBTUEsQ0FQRDs7QUFTQWQsTUFBTSxDQUFDSyxTQUFQLENBQWlCYSxNQUFqQixHQUEwQixVQUFXQyxLQUFYLEVBQW1CO0FBQzVDLFNBQU9BLEtBQUssQ0FBQ04sSUFBTixDQUFZLEtBQUtYLE9BQWpCLENBQVA7QUFDQSxDQUZEOztBQUlBRixNQUFNLENBQUNLLFNBQVAsQ0FBaUJlLE1BQU0sQ0FBQ0MsUUFBeEI7QUFBQTtBQUFBLHdCQUFvQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDbkMsaUJBQU0sS0FBS25CLE9BQVg7O0FBRG1DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQXBDO0FBSUE7Ozs7QUFHQUYsTUFBTSxDQUFDSyxTQUFQLENBQWlCaUIsU0FBakIsR0FBNkIsVUFBV0MsQ0FBWCxFQUFlQyxDQUFmLEVBQW1CO0FBQy9DLFNBQU8sSUFBSUMsV0FBSixDQUFXLElBQUlkLE9BQUosQ0FBVyxLQUFLVixDQUFoQixDQUFYLEVBQWlDLEtBQUtDLE9BQXRDLEVBQWdELElBQUlTLE9BQUosQ0FBVyxLQUFLVixDQUFoQixDQUFoRCxDQUFQO0FBQ0EsQ0FGRDs7QUFJQUQsTUFBTSxDQUFDSyxTQUFQLENBQWlCcUIsS0FBakIsR0FBeUIsVUFBV0gsQ0FBWCxFQUFlO0FBQ3ZDLFNBQU9BLENBQUMsQ0FBRSxLQUFLbkIsT0FBTCxFQUFGLENBQUQsR0FBdUIsQ0FBRSxJQUFJTyxPQUFKLENBQVcsS0FBS1YsQ0FBaEIsQ0FBRixFQUF3QixJQUF4QixDQUF2QixHQUF3RCxDQUFFLElBQUYsRUFBUyxJQUFJVSxPQUFKLENBQVcsS0FBS1YsQ0FBaEIsQ0FBVCxDQUEvRDtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmVlIH0gZnJvbSAnLi4vYmFzZScgO1xuaW1wb3J0IHsgRW1wdHkgLCBEZWVwIH0gZnJvbSAnLicgO1xuaW1wb3J0IHsgX0VNUFRZICwgY2FjaGUgLCBTcGxpdCB9IGZyb20gJy4uLy4uLzAtY29yZScgO1xuaW1wb3J0IHsgT25lIH0gZnJvbSAnLi4vLi4vMS1kaWdpdCcgO1xuXG5leHBvcnQgZnVuY3Rpb24gU2luZ2xlICggTSAsIGVsZW1lbnQgKSB7XG5cdHRoaXMuTSA9IE0gO1xuXHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50IDtcblx0dGhpcy52ID0gTS5tZWFzdXJlKCBlbGVtZW50ICkgO1xufVxuXG5TaW5nbGUucHJvdG90eXBlID0gbmV3IFRyZWUoICkgO1xuXG5TaW5nbGUucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gdGhpcy52IDtcbn0gO1xuXG5TaW5nbGUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIGZhbHNlIDtcbn0gO1xuXG5TaW5nbGUucHJvdG90eXBlLmhlYWQgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gdGhpcy5lbGVtZW50IDtcbn0gO1xuXG5TaW5nbGUucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gdGhpcy5lbGVtZW50IDtcbn0gO1xuXG5TaW5nbGUucHJvdG90eXBlLnRhaWwgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IEVtcHR5KCB0aGlzLk0gKSA7XG59IDtcblxuU2luZ2xlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIG5ldyBFbXB0eSggdGhpcy5NICkgO1xufSA7XG5cblNpbmdsZS5wcm90b3R5cGUuY29ucyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgRGVlcChcblx0XHR0aGlzLk0gLFxuXHRcdG5ldyBPbmUoIHZhbHVlICkgLFxuXHRcdG5ldyBFbXB0eSggY2FjaGUoIHRoaXMuTSApICkgLFxuXHRcdG5ldyBPbmUoIHRoaXMuZWxlbWVudCApXG5cdCkgO1xufSA7XG5cblNpbmdsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgRGVlcChcblx0XHR0aGlzLk0gLFxuXHRcdG5ldyBPbmUoIHRoaXMuZWxlbWVudCApICxcblx0XHRuZXcgRW1wdHkoIGNhY2hlKCB0aGlzLk0gKSApICxcblx0XHRuZXcgT25lKCB2YWx1ZSApXG5cdCkgO1xufSA7XG5cblNpbmdsZS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKCBvdGhlciApIHtcblx0cmV0dXJuIG90aGVyLmNvbnMoIHRoaXMuZWxlbWVudCApIDtcbn0gO1xuXG5TaW5nbGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiogKCApIHtcblx0eWllbGQgdGhpcy5lbGVtZW50IDtcbn0gO1xuXG4vKipcbiAqIEl0IGlzIGFzc3VtZWQgdGhhdCBwKHx0aGlzfCkgaXMgdHJ1ZS5cbiAqL1xuU2luZ2xlLnByb3RvdHlwZS5zcGxpdFRyZWUgPSBmdW5jdGlvbiAoIHAgLCBpICkge1xuXHRyZXR1cm4gbmV3IFNwbGl0KCBuZXcgRW1wdHkoIHRoaXMuTSApICwgdGhpcy5lbGVtZW50ICwgbmV3IEVtcHR5KCB0aGlzLk0gKSApIDtcbn0gO1xuXG5TaW5nbGUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKCBwICkge1xuXHRyZXR1cm4gcCggdGhpcy5tZWFzdXJlKCApICkgPyBbIG5ldyBFbXB0eSggdGhpcy5NICkgLCB0aGlzIF0gOiBbIHRoaXMgLCBuZXcgRW1wdHkoIHRoaXMuTSApIF0gO1xufSA7XG4iXX0=